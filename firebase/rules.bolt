// Uses Firebase Bolt to generate firebase rules JSON.
// https://github.com/firebase/bolt/blob/master/docs/guide.md
// To generate the rules json:
//    firebase-bolt rules.bolt
// Then, paste it into firebase's rules console.

// #1 patch around https://github.com/firebase/bolt/issues/95
// #2 patch around https://github.com/firebase/bolt/issues/58

// The following mimics the contents of sample_firebase.json

/******************************************************************************
 Define IDs - Simple Strings
******************************************************************************/
type ChatRoomId extends String { validate() { this.startsWith("chatRoom-") } }
type GameId extends String { validate() { this.startsWith("game-") } }
type OptionalGameId extends String { validate() { this == "" || this.startsWith("game-") } }
type MessageId extends String { validate() { this.startsWith("message-") } }
type PlayerId extends String { validate() { this.startsWith("player-") } }
type OptionalPlayerId extends String { validate() { this == "" || this.startsWith("player-") } }
type GroupId extends String { validate() { this.startsWith("group-") } }
type UserId extends String { validate() { !this.includes("-") } }
type MissionId extends String { validate() { this.startsWith("mission-") } }
type RewardCategoryId extends String { validate() { this.startsWith("rewardCategory-") } }
type GunId extends String { validate() { this.startsWith("gun-") } }
type RewardId extends String { validate() { this.startsWith("reward-") } }
type LifeId extends String { }

/******************************************************************************
 Simple Types That Need Validation
******************************************************************************/
type Allegiance extends String {
  validate() {
    this == 'resistance' || this == 'horde'
  }
}

type OptionalAllegiance extends String {
  validate() {
    this == 'none' || this == 'resistance' || this == 'horde'
  }
}

type Timestamp extends Number {
  validate() {
    this > 1490000000000 // March 2017, milliseconds
  }
}

type OptionalTimestamp extends Number {
  validate() {
    this == 0 || this > 1490000000000 // March 2017, milliseconds
  }
}

type HtmlUrl extends String {
  validate() {
    this.includes("/") && this.includes(".")
  }
}

/******************************************************************************
 Simple Types
******************************************************************************/
type ImageUrl {
  url: HtmlUrl;
}

type Location {
  latitude: Number;
  longitude: Number;
}

/******************************************************************************
 Helper Functions Needed By Complex Types
******************************************************************************/

getCurrentUser() {
  root.users[auth.uid]
}

isGroupMember(groupId) {  
  // PROBLEM: TODO: can't iterate in firebase
  root.groups[groupId].players[getCurrentUser().players[0]] 
}

isAdmin(gameId) {
  root.games[gameId].admins[auth.uid] != null
}

isServer() {
  auth.uid == 'ZiD9uLhDnrLq2n416MjWjn0JOrci6H0oGm7bKyVN' // TODO: place in safe
}

/******************************************************************************
 Complex Types
******************************************************************************/

type ChatRoom {
  ChatRoomId: ChatRoomId; // #1
  name: String;
  withAdmins: Boolean;
  gameId: GameId;
  groupId: GroupId;
  messages: Map<MessageId, Message>;

  read() {
    auth != null && (isServer() ||
    isAdmin(this.gameId) ||
    isGroupMember(this.groupId))
  }

  // write() handled by server

  validate() {
    root.games[this.gameId] != null
  }
}


type Message {
  MessageId: MessageId; // #1
  message: String;
  playerId: PlayerId;
  time: Timestamp;
  image: ImageUrl;
  location: Location;

  read() {
    auth != null && (isServer() ||
    isAdmin(ref.parent().gameId) ||
    isGroupMember(ref.parent().groupId))
  }

  validate() {
    root.chatRooms[ref.parent().ChatRoomId]
  }
}

type Game {
  GameId: GameId; // #1
  active: Boolean;
  name: String;
  startTime: OptionalTimestamp;
  endTime: OptionalTimestamp
  registrationEndTime: OptionalTimestamp;
  stunTimer: Number;
  faqHtml: String;
  rulesHtml: String;

  adminUsers: Map<UserId, Boolean>;
  chatRooms: Map<ChatRoomId, Boolean>;
  missions: Map<MissionId, Boolean>;
  guns: Map<GunId, Boolean>;
  players: Map<PlayerId, Boolean>;
  rewardCategories: Map<RewardCategoryId, Boolean>;

  validate() {
    key() == this.GameId
  }
}

type Group {
  GroupId: GroupId; // #1
  allegianceFilter: OptionalAllegiance;
  autoAdd: Boolean;
  autoRemove: Boolean;
  canAddOthers: Boolean;
  canAddSelf: Boolean;
  canRemoveOthers: Boolean;
  canRemoveSelf: Boolean;
  gameId: GameId;
  name: String;
  ownerPlayerId: PlayerId;
  players: Map<PlayerId, Boolean>;

  read() {
    isServer() ||
    isAdmin(this.gameId) ||
    this.players[getCurrentUser()] != null
  }
  
  validate() {
    root.games[this.gameId] != null
  }
}


type Gun {
  GunId: GunId; // #1
  playerId: OptionalPlayerId;
  gameId: OptionalGameId;
  label: String;

  validate() {
    root.games[this.gameId].players[this.playerId] != null
  }
}

type Mission {
  MissionId: MissionId; // #1
  beginTime: Timestamp;
  endTime: Timestamp;
  detailsHtml: String;
  gameId: GameId;
  groupId: GroupId;
  name: String;
  rsvpersGroupId: GroupId;

  read() {
    isGroupMember(this.groupId)
  }
  validate() {
    root.games[this.gameId] != null
  }
}

type Volunteer {
  admin: Boolean;
  advertising: Boolean;
  android: Boolean;
  chronicler: Boolean;
  cleric: Boolean;
  client: Boolean;
  communications: Boolean;
  ios: Boolean;
  logistics: Boolean;
  moderator: Boolean;
  photographer: Boolean;
  server: Boolean;
  sorcerer: Boolean;
}

type NotificationSettings {
  sound: Boolean;
  vibrate: Boolean;
}

type PrivatePlayer extends PlayerBase {
  beInPhotos: Boolean;
  canInfect: Boolean;
  gameId: GameId;
  gotEquipment: Boolean;
  needGun: Boolean;
  notes: String;
  notificationSettings: NotificationSettings;
  userId: UserId;
  volunteer: Volunteer;
  wantToBeSecretZombie: Boolean;
  chatRooms: Map<ChatRoomId, Boolean>;
  missions: Map<MissionId, Boolean>;
  lives: Map<LifeId, PrivateLife>

  read() {
    isServer() ||
    isAdmin(this.gameId) ||
    auth.uid == this.userId
  }
  validate() {
    key() == this.gameId && // #1
    root.games[this.gameId].players[this.playerId] != null
  }
}


type Reward {
  RewardId: RewardId; // #1
  rewardCategoryId: RewardCategoryId;
  time: Timestamp;
  code: String;
  playerId: OptionalPlayerId;

  validate() { // #2
    this.playerId == "" ||
    root.publicPlayers[this.playerId] != null
  }
}

type PublicPlayer extends PlayerBase {
  active: Boolean;
  allegiance: Allegiance;
  claims: Map<RewardId, Reward>;
  name: String;
  number: Number;
  points: Number;
  profileImageUrl: HtmlUrl;
  userId: UserId;
  lives: Map<LifeId, PublicLife>

  read() {
    isServer() ||
    isAdmin(this.gameId) ||
    auth.uid == this.userId
  }
  validate() {
    root.privatePlayers[this.playerId] != null
  }
}

type RewardCategory {
  RewardCategoryId: RewardCategoryId; // #1
  badgeImageUrl: HtmlUrl;
  claimed: Number;
  description: String;
  gameId: GameId;
  limitPerPlayer: Number;
  name: String;
  points: Number;
  rewards: Map<RewardId, Boolean>;
  shortName: String;
}

type Player {
  gameId: GameId;
}

type PlayerBase {
  PlayerId: PlayerId; // #1
}

type LifeBase {
  LifeId: LifeId; // #1
}

type User {
  UserId: UserId; // #1
  a: Boolean;
  players: Map<PlayerId, Player>;

  read() {
    isServer() ||
    auth.uid == key()
  }
}

type PrivateLife extends LifeBase {
  code: String;
}

type PublicLife extends LifeBase {
  time: OptionalTimestamp;
}

/******************************************************************************
 Possible Paths
******************************************************************************/
/ {
  write() { isServer() }
}

/chatRooms/{ChatRoomId} is Map<ChatRoomId, ChatRoom>;
/chatRooms/{ChatRoomId}/messages/{MessageId} is Map<MessageId, Message>;
/games/{GameId} is Map<GameId, Game>;
/games/{GameId}/adminUsers/{UserId} is Map<UserId, User>;
/groups/{GroupId} is Map<GroupId, Group>;
/groups/{GroupId}/players/{PlayerId} is Map<PlayerId, PrivatePlayer>;
/guns/{GunId} is Map<GunId, Gun>;
/missions/{MissionId} is Map<MissionId, Mission>;
/playersPrivate/{PlayerId} is Map<PlayerId, PrivatePlayer>;
/playersPrivate/{PlayerId}/lives/{LifeId} is Map<LifeId, PrivateLife>;
/playersPublic/{PlayerId}  is Map<PlayerId, PublicPlayer>;
/playersPublic/{PlayerId}/lives/{LifeId} is Map<LifeId, PublicLife>;
/rewardCategories/{RewardCategoryId} is Map<RewardCategoryId, RewardCategory>;
/rewards/{RewardId} is Map<RewardId, RewardCategory>;
/users/{UserId}/players/{PlayerId} is Map<PlayerId, PrivatePlayer>;
